package ouc.drolo.action.user;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;
import ouc.drolo.action.diaodu.Dispatcher;
import ouc.drolo.dao.OperatorDao;
import ouc.drolo.dao.OrderDao;
import ouc.drolo.domain.Order;
import ouc.drolo.domain.Staff;
import ouc.drolo.util.order.FileEveryDaySerialNumber;
import ouc.drolo.util.order.SerialNumber;
import wph.iframework.Action;
import wph.iframework.dao.db.Database;
import wph.iframework.dao.db.SqlServer;
import wph.iframework.push.staffPush;

/**
 * 用户端 生成 订单 
 * @author jeep
 *
 */
public class UserOrderGenerateAction extends Action {

	@Override
	public String execute(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		
		SerialNumber serial = new FileEveryDaySerialNumber(4, "EveryDaySerialNumber.dat");
		String orderId =serial.getSerialNumber();
		
		String flag = "0";
		
		String userId = request.getParameter("userId");
		String takePhone = request.getParameter("takePhone"); // 收衣电话 
		String address = request.getParameter("address");
		address = new String(address.getBytes("ISO-8859-1"), "UTF-8");
		//经纬度
		String longitude = request.getParameter("longitude");
		String latitude = request.getParameter("latitude");
		String large = request.getParameter("large");  // 有无大件  默认 无
		
		
		String amount = request.getParameter("amount");
		String note = request.getParameter("note");
		note = new String(note.getBytes("ISO-8859-1"), "UTF-8");
		
		String userName = request.getParameter("name");
		userName = new String(userName.getBytes("ISO-8859-1"), "UTF-8");
		
	
		System.out.println("订单号 ： "+orderId+"      用户下单地址   :   " + address+"  用户下单姓名 :" + userName); 
	
		Order order = new Order();
		order.setLarge(large);
		order.setAmount(amount);
		order.setNote(note);
		order.setTakePhone(takePhone);
		order.setAddress(address);
 		order.setOrderId(orderId); 
 		order.setUserId(userId);
 		order.setLongitude(longitude);
 		order.setLatitude(latitude); 
 		order.setUserName(userName);
 		
	Dispatcher dispatcher = Dispatcher.getInstance();
    	
        List<Staff> staffs = dispatcher.getstaffs().getAll();   
        Iterator<Staff> i = staffs.iterator();
      ArrayList<String> ids=new ArrayList<String>();
      System.out.println("fffff：            "+staffs.size());
        while (i.hasNext())
        {System.out.println("hhjyu6：");
            Staff staff = i.next();
            ids.add(staff.getStaffId());
          
        }
        
        int size=ids.size();
       	
        int sid=(int)(1+Math.random()*(size));
       // System.out.println("随se："+sid);
        String staffid=ids.get(sid-1);
	   	//System.out.println("随机数："+sid);
       //	System.out.println("随机staffid："+staffid);
     	
       	Database db = null;
		try {
			db = new SqlServer();
			db.setAutoCommit(false);
			OrderDao orderDao = new OrderDao(db); 
			
		int staid=Integer.parseInt(staffid);
			OperatorDao operatorDao=new OperatorDao(db);
			//System.out.println("staid："+staid);
				String pushId=orderDao.getPushId(staid);
				System.out.println("pushID："+pushId);
			System.err.println("xxxxxxxxxxxxxxxxxxxxxxxxxx");
//			flag = 	 orderDao.generateOrder(order,123); 
			
			flag = orderDao.generateOrder(order,staid);
				
				String phoneString=operatorDao.getstaffphone(staffid);
				order.setStaffphone(phoneString);
				String addres=orderDao.getAddres(orderId);
				JSONObject js=new JSONObject();
				js.put("orderId", flag);
				js.put("address", addres);
				 staffPush.tixing(pushId, js.toString());
				 
			db.commit();
			db.close();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return flag;
	}

	private int RAND() {
		return 0;
	}
}
